"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Histogram = void 0;

var _collector = require("./collector");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function findMinBucketIndex(ary, num) {
  if (num < ary[ary.length - 1]) {
    for (var i = 0; i < ary.length; i += 1) {
      if (num <= ary[i]) {
        return i;
      }
    }
  }

  return undefined;
}

function getInitialValue(buckets) {
  // Make the skeleton to which values will be saved.
  var entries = buckets.reduce(function (result, b) {
    result[b.toString()] = 0;
    return result;
  }, {
    '+Inf': 0
  });
  return {
    entries: entries,
    sum: 0,
    count: 0,
    raw: []
  };
}

var Histogram =
/*#__PURE__*/
function (_Collector) {
  _inherits(Histogram, _Collector);

  function Histogram() {
    var _this;

    var buckets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    _classCallCheck(this, Histogram);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Histogram).call(this)); // Sort to get smallest -> largest in order.

    _defineProperty(_assertThisInitialized(_this), "buckets", void 0);

    _this.buckets = buckets.sort(function (a, b) {
      return a > b ? 1 : -1;
    });

    _this.set(getInitialValue(_this.buckets));

    _this.observe = _this.observe.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Histogram, [{
    key: "observe",
    value: function observe(value, labels) {
      var metric = this.get(labels);

      if (metric == null) {
        // Create a metric for the labels.
        metric = this.set(getInitialValue(this.buckets), labels).get(labels);
      }

      metric.value.raw.push(value);
      metric.value.entries['+Inf'] += 1;
      var minBucketIndex = findMinBucketIndex(this.buckets, value);

      if (minBucketIndex != null) {
        for (var i = minBucketIndex; i < this.buckets.length; i += 1) {
          var val = metric.value.entries[this.buckets[i].toString()];
          metric.value.entries[this.buckets[i].toString()] = val + 1;
        }
      }

      metric.value.sum = metric.value.raw.reduce(function (sum, v) {
        return sum + v;
      }, 0);
      metric.value.count += 1;
      return this;
    }
  }, {
    key: "reset",
    value: function reset(labels) {
      this.set(getInitialValue(this.buckets), labels);
    }
  }]);

  return Histogram;
}(_collector.Collector);

exports.Histogram = Histogram;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9oaXN0b2dyYW0udHMiXSwibmFtZXMiOlsiZmluZE1pbkJ1Y2tldEluZGV4IiwiYXJ5IiwibnVtIiwibGVuZ3RoIiwiaSIsInVuZGVmaW5lZCIsImdldEluaXRpYWxWYWx1ZSIsImJ1Y2tldHMiLCJlbnRyaWVzIiwicmVkdWNlIiwicmVzdWx0IiwiYiIsInRvU3RyaW5nIiwic3VtIiwiY291bnQiLCJyYXciLCJIaXN0b2dyYW0iLCJzb3J0IiwiYSIsInNldCIsIm9ic2VydmUiLCJiaW5kIiwidmFsdWUiLCJsYWJlbHMiLCJtZXRyaWMiLCJnZXQiLCJwdXNoIiwibWluQnVja2V0SW5kZXgiLCJ2YWwiLCJ2IiwiQ29sbGVjdG9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHQSxTQUFTQSxrQkFBVCxDQUE0QkMsR0FBNUIsRUFBMkNDLEdBQTNDLEVBQTRFO0FBQzFFLE1BQUlBLEdBQUcsR0FBR0QsR0FBRyxDQUFDQSxHQUFHLENBQUNFLE1BQUosR0FBYSxDQUFkLENBQWIsRUFBK0I7QUFDN0IsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSCxHQUFHLENBQUNFLE1BQXhCLEVBQWdDQyxDQUFDLElBQUksQ0FBckMsRUFBd0M7QUFDdEMsVUFBSUYsR0FBRyxJQUFJRCxHQUFHLENBQUNHLENBQUQsQ0FBZCxFQUFtQjtBQUNqQixlQUFPQSxDQUFQO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFNBQU9DLFNBQVA7QUFDRDs7QUFFRCxTQUFTQyxlQUFULENBQXlCQyxPQUF6QixFQUE0RDtBQUMxRDtBQUNBLE1BQU1DLE9BQU8sR0FBR0QsT0FBTyxDQUFDRSxNQUFSLENBQWUsVUFBQ0MsTUFBRCxFQUFTQyxDQUFULEVBQWU7QUFDNUNELElBQUFBLE1BQU0sQ0FBQ0MsQ0FBQyxDQUFDQyxRQUFGLEVBQUQsQ0FBTixHQUF1QixDQUF2QjtBQUNBLFdBQU9GLE1BQVA7QUFDRCxHQUhlLEVBR2I7QUFBRSxZQUFRO0FBQVYsR0FIYSxDQUFoQjtBQUtBLFNBQU87QUFDTEYsSUFBQUEsT0FBTyxFQUFQQSxPQURLO0FBRUxLLElBQUFBLEdBQUcsRUFBRSxDQUZBO0FBR0xDLElBQUFBLEtBQUssRUFBRSxDQUhGO0FBSUxDLElBQUFBLEdBQUcsRUFBRTtBQUpBLEdBQVA7QUFNRDs7SUFFWUMsUzs7Ozs7QUFHWCx1QkFBb0M7QUFBQTs7QUFBQSxRQUF4QlQsT0FBd0IsdUVBQUosRUFBSTs7QUFBQTs7QUFDbEMsb0ZBRGtDLENBRWxDOztBQUZrQzs7QUFHbEMsVUFBS0EsT0FBTCxHQUFlQSxPQUFPLENBQUNVLElBQVIsQ0FBYSxVQUFDQyxDQUFELEVBQUlQLENBQUo7QUFBQSxhQUFXTyxDQUFDLEdBQUdQLENBQUosR0FBUSxDQUFSLEdBQVksQ0FBQyxDQUF4QjtBQUFBLEtBQWIsQ0FBZjs7QUFDQSxVQUFLUSxHQUFMLENBQVNiLGVBQWUsQ0FBQyxNQUFLQyxPQUFOLENBQXhCOztBQUNBLFVBQUthLE9BQUwsR0FBZSxNQUFLQSxPQUFMLENBQWFDLElBQWIsK0JBQWY7QUFMa0M7QUFNbkM7Ozs7NEJBRU9DLEssRUFBZUMsTSxFQUF1QjtBQUM1QyxVQUFJQyxNQUFNLEdBQUcsS0FBS0MsR0FBTCxDQUFTRixNQUFULENBQWI7O0FBQ0EsVUFBSUMsTUFBTSxJQUFJLElBQWQsRUFBb0I7QUFDbEI7QUFDQUEsUUFBQUEsTUFBTSxHQUFHLEtBQUtMLEdBQUwsQ0FBU2IsZUFBZSxDQUFDLEtBQUtDLE9BQU4sQ0FBeEIsRUFBd0NnQixNQUF4QyxFQUFnREUsR0FBaEQsQ0FBb0RGLE1BQXBELENBQVQ7QUFDRDs7QUFFREMsTUFBQUEsTUFBTSxDQUFDRixLQUFQLENBQWFQLEdBQWIsQ0FBaUJXLElBQWpCLENBQXNCSixLQUF0QjtBQUNBRSxNQUFBQSxNQUFNLENBQUNGLEtBQVAsQ0FBYWQsT0FBYixDQUFxQixNQUFyQixLQUFnQyxDQUFoQztBQUVBLFVBQU1tQixjQUFjLEdBQUczQixrQkFBa0IsQ0FBQyxLQUFLTyxPQUFOLEVBQWVlLEtBQWYsQ0FBekM7O0FBRUEsVUFBSUssY0FBYyxJQUFJLElBQXRCLEVBQTRCO0FBQzFCLGFBQUssSUFBSXZCLENBQUMsR0FBR3VCLGNBQWIsRUFBNkJ2QixDQUFDLEdBQUcsS0FBS0csT0FBTCxDQUFhSixNQUE5QyxFQUFzREMsQ0FBQyxJQUFJLENBQTNELEVBQThEO0FBQzVELGNBQU13QixHQUFHLEdBQUdKLE1BQU0sQ0FBQ0YsS0FBUCxDQUFhZCxPQUFiLENBQXFCLEtBQUtELE9BQUwsQ0FBYUgsQ0FBYixFQUFnQlEsUUFBaEIsRUFBckIsQ0FBWjtBQUNBWSxVQUFBQSxNQUFNLENBQUNGLEtBQVAsQ0FBYWQsT0FBYixDQUFxQixLQUFLRCxPQUFMLENBQWFILENBQWIsRUFBZ0JRLFFBQWhCLEVBQXJCLElBQW1EZ0IsR0FBRyxHQUFHLENBQXpEO0FBQ0Q7QUFDRjs7QUFFREosTUFBQUEsTUFBTSxDQUFDRixLQUFQLENBQWFULEdBQWIsR0FBbUJXLE1BQU0sQ0FBQ0YsS0FBUCxDQUFhUCxHQUFiLENBQWlCTixNQUFqQixDQUF3QixVQUFDSSxHQUFELEVBQU1nQixDQUFOO0FBQUEsZUFBWWhCLEdBQUcsR0FBR2dCLENBQWxCO0FBQUEsT0FBeEIsRUFBNkMsQ0FBN0MsQ0FBbkI7QUFDQUwsTUFBQUEsTUFBTSxDQUFDRixLQUFQLENBQWFSLEtBQWIsSUFBc0IsQ0FBdEI7QUFFQSxhQUFPLElBQVA7QUFDRDs7OzBCQUVLUyxNLEVBQXVCO0FBQzNCLFdBQUtKLEdBQUwsQ0FBU2IsZUFBZSxDQUFDLEtBQUtDLE9BQU4sQ0FBeEIsRUFBd0NnQixNQUF4QztBQUNEOzs7O0VBdEM0Qk8sb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2xsZWN0b3IgfSBmcm9tICcuL2NvbGxlY3Rvcic7XG5pbXBvcnQgeyBIaXN0b2dyYW1WYWx1ZSwgSGlzdG9ncmFtVmFsdWVFbnRyaWVzLCBMYWJlbHMgfSBmcm9tICcuL3R5cGVzJztcblxuZnVuY3Rpb24gZmluZE1pbkJ1Y2tldEluZGV4KGFyeTogbnVtYmVyW10sIG51bTogbnVtYmVyKTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcbiAgaWYgKG51bSA8IGFyeVthcnkubGVuZ3RoIC0gMV0pIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyeS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKG51bSA8PSBhcnlbaV0pIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZ2V0SW5pdGlhbFZhbHVlKGJ1Y2tldHM6IG51bWJlcltdKTogSGlzdG9ncmFtVmFsdWUge1xuICAvLyBNYWtlIHRoZSBza2VsZXRvbiB0byB3aGljaCB2YWx1ZXMgd2lsbCBiZSBzYXZlZC5cbiAgY29uc3QgZW50cmllcyA9IGJ1Y2tldHMucmVkdWNlKChyZXN1bHQsIGIpID0+IHtcbiAgICByZXN1bHRbYi50b1N0cmluZygpXSA9IDA7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSwgeyAnK0luZic6IDAgfSBhcyBIaXN0b2dyYW1WYWx1ZUVudHJpZXMpO1xuXG4gIHJldHVybiB7XG4gICAgZW50cmllcyxcbiAgICBzdW06IDAsXG4gICAgY291bnQ6IDAsXG4gICAgcmF3OiBbXSxcbiAgfTtcbn1cblxuZXhwb3J0IGNsYXNzIEhpc3RvZ3JhbSBleHRlbmRzIENvbGxlY3RvcjxIaXN0b2dyYW1WYWx1ZT4ge1xuICBwcml2YXRlIHJlYWRvbmx5IGJ1Y2tldHM6IG51bWJlcltdO1xuXG4gIGNvbnN0cnVjdG9yKGJ1Y2tldHM6IG51bWJlcltdID0gW10pIHtcbiAgICBzdXBlcigpO1xuICAgIC8vIFNvcnQgdG8gZ2V0IHNtYWxsZXN0IC0+IGxhcmdlc3QgaW4gb3JkZXIuXG4gICAgdGhpcy5idWNrZXRzID0gYnVja2V0cy5zb3J0KChhLCBiKSA9PiAoYSA+IGIgPyAxIDogLTEpKTtcbiAgICB0aGlzLnNldChnZXRJbml0aWFsVmFsdWUodGhpcy5idWNrZXRzKSk7XG4gICAgdGhpcy5vYnNlcnZlID0gdGhpcy5vYnNlcnZlLmJpbmQodGhpcyk7XG4gIH1cblxuICBvYnNlcnZlKHZhbHVlOiBudW1iZXIsIGxhYmVscz86IExhYmVscyk6IHRoaXMge1xuICAgIGxldCBtZXRyaWMgPSB0aGlzLmdldChsYWJlbHMpO1xuICAgIGlmIChtZXRyaWMgPT0gbnVsbCkge1xuICAgICAgLy8gQ3JlYXRlIGEgbWV0cmljIGZvciB0aGUgbGFiZWxzLlxuICAgICAgbWV0cmljID0gdGhpcy5zZXQoZ2V0SW5pdGlhbFZhbHVlKHRoaXMuYnVja2V0cyksIGxhYmVscykuZ2V0KGxhYmVscykhO1xuICAgIH1cblxuICAgIG1ldHJpYy52YWx1ZS5yYXcucHVzaCh2YWx1ZSk7XG4gICAgbWV0cmljLnZhbHVlLmVudHJpZXNbJytJbmYnXSArPSAxO1xuXG4gICAgY29uc3QgbWluQnVja2V0SW5kZXggPSBmaW5kTWluQnVja2V0SW5kZXgodGhpcy5idWNrZXRzLCB2YWx1ZSk7XG5cbiAgICBpZiAobWluQnVja2V0SW5kZXggIT0gbnVsbCkge1xuICAgICAgZm9yIChsZXQgaSA9IG1pbkJ1Y2tldEluZGV4OyBpIDwgdGhpcy5idWNrZXRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IHZhbCA9IG1ldHJpYy52YWx1ZS5lbnRyaWVzW3RoaXMuYnVja2V0c1tpXS50b1N0cmluZygpXTtcbiAgICAgICAgbWV0cmljLnZhbHVlLmVudHJpZXNbdGhpcy5idWNrZXRzW2ldLnRvU3RyaW5nKCldID0gdmFsICsgMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZXRyaWMudmFsdWUuc3VtID0gbWV0cmljLnZhbHVlLnJhdy5yZWR1Y2UoKHN1bSwgdikgPT4gc3VtICsgdiwgMCk7XG4gICAgbWV0cmljLnZhbHVlLmNvdW50ICs9IDE7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJlc2V0KGxhYmVscz86IExhYmVscyk6IHZvaWQge1xuICAgIHRoaXMuc2V0KGdldEluaXRpYWxWYWx1ZSh0aGlzLmJ1Y2tldHMpLCBsYWJlbHMpO1xuICB9XG59XG4iXX0=