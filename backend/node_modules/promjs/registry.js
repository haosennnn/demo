"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Registry = void 0;

var _counter = require("./counter");

var _gauge = require("./gauge");

var _histogram = require("./histogram");

var _utils = require("./utils");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Registry =
/*#__PURE__*/
function () {
  function Registry() {
    _classCallCheck(this, Registry);

    _defineProperty(this, "data", void 0);

    this.data = {
      counter: {},
      gauge: {},
      histogram: {}
    };
  }

  _createClass(Registry, [{
    key: "validateInput",
    value: function validateInput(type, name, help, buckets) {
      // checks for js runtime
      if (String(name) === '') {
        throw new Error('Metric name cannot be empty');
      }

      if (['counter', 'gauge', 'histogram'].indexOf(type) === -1) {
        throw new Error("Unknown metric type ".concat(type));
      }

      if (typeof help !== 'string' && help != null) {
        throw new Error('help must be string or undefined/null');
      }

      if (this.data[type][name]) {
        throw new Error("A metric with the name '".concat(name, "' already exists for type '").concat(type, "'"));
      }

      if (!Array.isArray(buckets) && buckets != null) {
        throw new Error('buckets must be array or undefined/null');
      }
    }
  }, {
    key: "create",
    value: function create(type, name) {
      var help = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var histogramBuckets = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
      this.validateInput(type, name, help, histogramBuckets);
      var instance;

      if (type === 'counter') {
        instance = new _counter.Counter();
        this.data.counter[name] = {
          help: help,
          instance: instance,
          type: type
        };
      } else if (type === 'gauge') {
        instance = new _gauge.Gauge();
        this.data.gauge[name] = {
          help: help,
          instance: instance,
          type: type
        };
      } else {
        instance = new _histogram.Histogram(histogramBuckets);
        this.data.histogram[name] = {
          help: help,
          instance: instance,
          type: type
        };
      }

      return instance;
    }
    /**
     * Returns a string in the prometheus' desired format
     * More info: https://prometheus.io/docs/concepts/data_model/
     * Loop through each metric type (counter, histogram, etc);
     *
     * @return {string}
     */

  }, {
    key: "metrics",
    value: function metrics() {
      return Object.entries(this.data).reduce(function (out, _ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            type = _ref2[0],
            metrics = _ref2[1];

        return out + Object.entries(metrics).reduce(function (src, _ref3) {
          var _ref4 = _slicedToArray(_ref3, 2),
              name = _ref4[0],
              metric = _ref4[1];

          var values = metric.instance.collect();
          var result = src;

          if (metric.help.length > 0) {
            result += "# HELP ".concat(name, " ").concat(metric.help, "\n");
          }

          result += "# TYPE ".concat(name, " ").concat(type, "\n"); // Each metric can have many labels. Iterate over each and append to the string.

          result += values.reduce(function (str, value) {
            var formatted = type === 'histogram' ? (0, _utils.formatHistogramOrSummary)(name, value) : (0, _utils.formatCounterOrGauge)(name, value);
            return str + formatted;
          }, '');
          return result;
        }, '');
      }, '');
    }
  }, {
    key: "reset",
    value: function reset() {
      Object.values(this.data).map(function (m) {
        return Object.values(m).map(function (_ref5) {
          var instance = _ref5.instance;
          return instance.resetAll();
        });
      });
      return this;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.data = {
        counter: {},
        gauge: {},
        histogram: {}
      };
      return this;
    }
  }, {
    key: "get",
    value: function get(type, name) {
      var registryItems = type != null ? [this.data[type]] : Object.values(this.data);
      var metric = registryItems.find(function (v) {
        return name in v;
      });
      return metric != null ? metric[name].instance : undefined;
    }
  }]);

  return Registry;
}();

exports.Registry = Registry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,