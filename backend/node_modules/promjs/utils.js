"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatHistogramOrSummary = formatHistogramOrSummary;
exports.findExistingMetric = findExistingMetric;
exports.formatCounterOrGauge = formatCounterOrGauge;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function getLabelPairs(metric) {
  var pairs = Object.entries(metric.labels || {}).map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        k = _ref2[0],
        v = _ref2[1];

    return "".concat(k, "=\"").concat(v, "\"");
  });
  return pairs.length === 0 ? '' : "".concat(pairs.join(','));
}

function formatHistogramOrSummary(name, metric) {
  var bucketLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'le';
  var str = '';
  var labels = getLabelPairs(metric);

  if (labels.length > 0) {
    str += "".concat(name, "_count{").concat(labels, "} ").concat(metric.value.count, "\n");
    str += "".concat(name, "_sum{").concat(labels, "} ").concat(metric.value.sum, "\n");
  } else {
    str += "".concat(name, "_count ").concat(metric.value.count, "\n");
    str += "".concat(name, "_sum ").concat(metric.value.sum, "\n");
  }

  return Object.entries(metric.value.entries).reduce(function (result, _ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        bucket = _ref4[0],
        count = _ref4[1];

    if (labels.length > 0) {
      return "".concat(result).concat(name, "_bucket{").concat(bucketLabel, "=\"").concat(bucket, "\",").concat(labels, "} ").concat(count, "\n");
    }

    return "".concat(result).concat(name, "_bucket{").concat(bucketLabel, "=\"").concat(bucket, "\"} ").concat(count, "\n");
  }, str);
}

function findExistingMetric(labels) {
  var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  // If there are no labels, there can only be one metric
  if (!labels) {
    return values[0];
  }

  return values.find(function (v) {
    if (!v.labels) {
      return false;
    }

    if (Object.keys(v.labels || {}).length !== Object.keys(labels).length) {
      return false;
    }

    var entries = Object.entries(labels);

    for (var i = 0; i < entries.length; i += 1) {
      var _entries$i = _slicedToArray(entries[i], 2),
          label = _entries$i[0],
          value = _entries$i[1];

      if (v.labels[label] !== value) {
        return false;
      }
    }

    return true;
  });
}

function formatCounterOrGauge(name, metric) {
  var value = " ".concat(metric.value.toString()); // If there are no keys on `metric`, it doesn't have a label;
  // return the count as a string.

  if (metric.labels == null || Object.keys(metric.labels).length === 0) {
    return "".concat(name).concat(value, "\n");
  }

  var pair = Object.entries(metric.labels).map(function (_ref5) {
    var _ref6 = _slicedToArray(_ref5, 2),
        k = _ref6[0],
        v = _ref6[1];

    return "".concat(k, "=\"").concat(v, "\"");
  });
  return "".concat(name, "{").concat(pair.join(','), "}").concat(value, "\n");
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy50cyJdLCJuYW1lcyI6WyJnZXRMYWJlbFBhaXJzIiwibWV0cmljIiwicGFpcnMiLCJPYmplY3QiLCJlbnRyaWVzIiwibGFiZWxzIiwibWFwIiwiayIsInYiLCJsZW5ndGgiLCJqb2luIiwiZm9ybWF0SGlzdG9ncmFtT3JTdW1tYXJ5IiwibmFtZSIsImJ1Y2tldExhYmVsIiwic3RyIiwidmFsdWUiLCJjb3VudCIsInN1bSIsInJlZHVjZSIsInJlc3VsdCIsImJ1Y2tldCIsImZpbmRFeGlzdGluZ01ldHJpYyIsInZhbHVlcyIsImZpbmQiLCJrZXlzIiwiaSIsImxhYmVsIiwiZm9ybWF0Q291bnRlck9yR2F1Z2UiLCJ0b1N0cmluZyIsInBhaXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsU0FBU0EsYUFBVCxDQUF1QkMsTUFBdkIsRUFBNEQ7QUFDMUQsTUFBTUMsS0FBSyxHQUFHQyxNQUFNLENBQUNDLE9BQVAsQ0FBZUgsTUFBTSxDQUFDSSxNQUFQLElBQWlCLEVBQWhDLEVBQW9DQyxHQUFwQyxDQUF3QztBQUFBO0FBQUEsUUFBRUMsQ0FBRjtBQUFBLFFBQUtDLENBQUw7O0FBQUEscUJBQWVELENBQWYsZ0JBQXFCQyxDQUFyQjtBQUFBLEdBQXhDLENBQWQ7QUFDQSxTQUFPTixLQUFLLENBQUNPLE1BQU4sS0FBaUIsQ0FBakIsR0FBcUIsRUFBckIsYUFBNkJQLEtBQUssQ0FBQ1EsSUFBTixDQUFXLEdBQVgsQ0FBN0IsQ0FBUDtBQUNEOztBQUVNLFNBQVNDLHdCQUFULENBQ0xDLElBREssRUFFTFgsTUFGSyxFQUlHO0FBQUEsTUFEUlksV0FDUSx1RUFETSxJQUNOO0FBQ1IsTUFBSUMsR0FBRyxHQUFHLEVBQVY7QUFDQSxNQUFNVCxNQUFNLEdBQUdMLGFBQWEsQ0FBQ0MsTUFBRCxDQUE1Qjs7QUFDQSxNQUFJSSxNQUFNLENBQUNJLE1BQVAsR0FBZ0IsQ0FBcEIsRUFBdUI7QUFDckJLLElBQUFBLEdBQUcsY0FBT0YsSUFB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QyxDQUFGO0FBQUEsUUFBS0MsQ0FBTDs7QUFBQSxxQkFBZUQsQ0FBZixnQkFBcUJDLENBQXJCO0FBQUEsR0FBbEMsQ0FBYjtBQUNBLG1CQUFVSSxJQUFWLGNBQWtCaUIsSUFBSSxDQUFDbkIsSUFBTCxDQUFVLEdBQVYsQ0FBbEIsY0FBb0NLLEtBQXBDO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIaXN0b2dyYW1WYWx1ZSwgTGFiZWxzLCBNZXRyaWMsIE1ldHJpY1ZhbHVlIH0gZnJvbSAnLi90eXBlcyc7XG5cbmZ1bmN0aW9uIGdldExhYmVsUGFpcnMobWV0cmljOiBNZXRyaWM8TWV0cmljVmFsdWU+KTogc3RyaW5nIHtcbiAgY29uc3QgcGFpcnMgPSBPYmplY3QuZW50cmllcyhtZXRyaWMubGFiZWxzIHx8IHt9KS5tYXAoKFtrLCB2XSkgPT4gYCR7a309XCIke3Z9XCJgKTtcbiAgcmV0dXJuIHBhaXJzLmxlbmd0aCA9PT0gMCA/ICcnIDogYCR7cGFpcnMuam9pbignLCcpfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRIaXN0b2dyYW1PclN1bW1hcnkoXG4gIG5hbWU6IHN0cmluZyxcbiAgbWV0cmljOiBNZXRyaWM8SGlzdG9ncmFtVmFsdWU+LFxuICBidWNrZXRMYWJlbCA9ICdsZScsXG4pOiBzdHJpbmcge1xuICBsZXQgc3RyID0gJyc7XG4gIGNvbnN0IGxhYmVscyA9IGdldExhYmVsUGFpcnMobWV0cmljKTtcbiAgaWYgKGxhYmVscy5sZW5ndGggPiAwKSB7XG4gICAgc3RyICs9IGAke25hbWV9X2NvdW50eyR7bGFiZWxzfX0gJHttZXRyaWMudmFsdWUuY291bnR9XFxuYDtcbiAgICBzdHIgKz0gYCR7bmFtZX1fc3VteyR7bGFiZWxzfX0gJHttZXRyaWMudmFsdWUuc3VtfVxcbmA7XG4gIH0gZWxzZSB7XG4gICAgc3RyICs9IGAke25hbWV9X2NvdW50ICR7bWV0cmljLnZhbHVlLmNvdW50fVxcbmA7XG4gICAgc3RyICs9IGAke25hbWV9X3N1bSAke21ldHJpYy52YWx1ZS5zdW19XFxuYDtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZW50cmllcyhtZXRyaWMudmFsdWUuZW50cmllcykucmVkdWNlKChyZXN1bHQsIFtidWNrZXQsIGNvdW50XSkgPT4ge1xuICAgIGlmIChsYWJlbHMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIGAke3Jlc3VsdH0ke25hbWV9X2J1Y2tldHske2J1Y2tldExhYmVsfT1cIiR7YnVja2V0fVwiLCR7bGFiZWxzfX0gJHtjb3VudH1cXG5gO1xuICAgIH1cbiAgICByZXR1cm4gYCR7cmVzdWx0fSR7bmFtZX1fYnVja2V0eyR7YnVja2V0TGFiZWx9PVwiJHtidWNrZXR9XCJ9ICR7Y291bnR9XFxuYDtcbiAgfSwgc3RyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRFeGlzdGluZ01ldHJpYzxUIGV4dGVuZHMgTWV0cmljVmFsdWU+KFxuICBsYWJlbHM/OiBMYWJlbHMsXG4gIHZhbHVlczogTWV0cmljPFQ+W10gPSBbXSxcbik6IE1ldHJpYzxUPiB8IHVuZGVmaW5lZCB7XG4gIC8vIElmIHRoZXJlIGFyZSBubyBsYWJlbHMsIHRoZXJlIGNhbiBvbmx5IGJlIG9uZSBtZXRyaWNcbiAgaWYgKCFsYWJlbHMpIHtcbiAgICByZXR1cm4gdmFsdWVzWzBdO1xuICB9XG4gIHJldHVybiB2YWx1ZXMuZmluZCgodikgPT4ge1xuICAgIGlmICghdi5sYWJlbHMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKE9iamVjdC5rZXlzKHYubGFiZWxzIHx8IHt9KS5sZW5ndGggIT09IE9iamVjdC5rZXlzKGxhYmVscykubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGVudHJpZXMgPSBPYmplY3QuZW50cmllcyhsYWJlbHMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgW2xhYmVsLCB2YWx1ZV0gPSBlbnRyaWVzW2ldO1xuICAgICAgaWYgKHYubGFiZWxzW2xhYmVsXSAhPT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRDb3VudGVyT3JHYXVnZShuYW1lOiBzdHJpbmcsIG1ldHJpYzogTWV0cmljPE1ldHJpY1ZhbHVlPik6IHN0cmluZyB7XG4gIGNvbnN0IHZhbHVlID0gYCAke21ldHJpYy52YWx1ZS50b1N0cmluZygpfWA7XG4gIC8vIElmIHRoZXJlIGFyZSBubyBrZXlzIG9uIGBtZXRyaWNgLCBpdCBkb2Vzbid0IGhhdmUgYSBsYWJlbDtcbiAgLy8gcmV0dXJuIHRoZSBjb3VudCBhcyBhIHN0cmluZy5cbiAgaWYgKG1ldHJpYy5sYWJlbHMgPT0gbnVsbCB8fCBPYmplY3Qua2V5cyhtZXRyaWMubGFiZWxzKS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gYCR7bmFtZX0ke3ZhbHVlfVxcbmA7XG4gIH1cbiAgY29uc3QgcGFpciA9IE9iamVjdC5lbnRyaWVzKG1ldHJpYy5sYWJlbHMpLm1hcCgoW2ssIHZdKSA9PiBgJHtrfT1cIiR7dn1cImApO1xuICByZXR1cm4gYCR7bmFtZX17JHtwYWlyLmpvaW4oJywnKX19JHt2YWx1ZX1cXG5gO1xufVxuIl19